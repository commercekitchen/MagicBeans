//= require moment
//= require bean/abstract
//= require bean/plugins
//= require bean/callbacks
//= require bean/listeners

<% MagicBeans.config.packages.each do |package| %>
	<% MagicBeans.assets.files("*.js", "bean/packages/#{package}/**").each { |name, path| require_asset(path) } %>
<% end %>

var Bean = (function($){
	return {
		_config: {},
		_init: false,
		_data: {},

		start: function(config){
			if(typeof config == 'object') this._config = config;
			if(typeof config == 'string') try { this._config = $.parseJSON(config) } catch(e){ console.warn('Invalid MagicBeans JSON Config: ', config); }

			var all = new Bean.Observer('all');
			all.start();

			var obs = new Bean.Observer(Bean.getPageName());
			obs.start();
		},

		is: function(type){
			return $('body').hasClass(type.toLowerCase());
		},

		debugging: function(){
			return Bean.Config.get('debug') == true;
		},

		getPageName: function(){
			var id = $('body').attr('id');
			var pieces = id.split('-');
			for(var i=1; i<pieces.length; i++){
				pieces[i] = pieces[i].toLowerCase().replace(/\b[a-z]/g, function(letter){
					return letter.toUpperCase();
				});
			}
			return pieces.join('');
		},

		setData: function(key, value){
			Bean._data[key] = value;
			return this;
		},

		getData: function(key){
			return Bean._data[key];
		},

		undo: function(form){
			form.submit();
		},

		debug: function(){
			var match,
				method = 'log',
				i = 0,
				args = Array.prototype.slice.call(arguments),
				index = $.inArray(args[args.length-1], ['info', 'warn', 'error', 'log', 'debug']);

			if(index !== -1) method = args.pop();

			if(typeof args[args.length-1] != 'function') args[0] = '[MagicBeans] ' + args[0];

			// Only output if we're in debug mode
			if(Bean.debugging()){
				if(typeof args[args.length-1] == 'function'){
					var callback = args.pop();
					console.groupCollapsed.apply(console, args);
					callback();
					console.groupEnd();
				}else{
					console[method].apply(console, args);
				}
			}
		},

		Config: {
			set: function(config){
				Bean._config = config;
				return this;
			},

			get: function(key, def){
				if(!def) def = false;
				if(Bean._config[key]){
					return Bean._config[key];
				}
				return def;
			}
		},

		Listener: {
			init: function(package){
				package = package.substr(0, 1).toUpperCase() + package.substr(1).toLowerCase();
				if(Listeners[package]){
					Listeners[package].run();
					Bean.debug('Initialized Package: Listeners.%s', package, 'info');
				}else{
					Bean.debug('Unable to Locate Package: Listeners.%s', package, 'warn');
				}
			}
		},

		Observer: function(page){
			var obs = this;
			obs.started = false;

			if(typeof Listeners[page] == 'string'){
				var copy = Listeners[page];
				Listeners[page] = Listeners[copy];
			}

			this.start = function(){
				if(Listeners[page] && !obs.started){
					if(Listeners[page]['once']) Listeners[page]['once'](obs);
					if(Listeners[page]['always']) Listeners[page]['always'](obs);
					obs.started = true;
				}
			}

			this.reboot = function(){
				if(Listeners[page]){
					if(Listeners[page]['always']) Listeners[page]['always'](obs);
				}
			}
		},

		Form: function(form_name, action, method, callback){
			var self = this;
			var _fields = [];
			var _built = false;

			this.addField = function(type, name, value, container, class_names, placeholder){
				if(container !== false) container = true;
				if(class_names == undefined) class_names = '';
				if(placeholder == undefined) placeholder = '';
				switch(type){
					case 'hidden' :
						_fields.push({ html: '<input type="hidden" name="' + name + '" id="' + self.getId(name) + '" value="' + value + '" class="' + class_names + '" />', container: container });
						break;
					case 'text' :
						_fields.push({ html: '<input type="text" name="' + name + '" id="' + self.getId(name) + '" value="' + value + '" class="' + class_names + '" placeholder="' + placeholder + '" />', container: container });
						break;
					case 'textarea' :
						_fields.push({ html: '<textarea name="' + name + '" id="' + self.getId(name) + '" class="' + class_names + '" placeholder="' + placeholder + '">' + value + '</textarea>', container: container });
						break;
					case 'select' :
						var select = '<select name="' + name + '" id="' + self.getId(name) + '" class="' + class_names + '">';
						for(var i=0; i<select.length; i++){
							select += '<option value="' + select[i].value + '"' + (select[i].selected ? ' selected="selected"' : '') + '>' + select[i].label + '</option>';
						}
						select += '</select>';
						_fields.push({ html: select, container: container });
						break;
				}
				return this;
			};

			this.addHtml = function(html){
				_fields.push({ html: html, container: false });
				return this;
			};

			this.getId = function(name){
				var id = name.replace(/[^A-Z0-9]/gi, ' ');
				id = id.replace(/[ ]{1,}/, ' ');
				return $.trim(id).replace(' ', '_');
			};

			this.getFormId = function(){
				return form_name;
			};

			this.getClassName = function(){
				return form_name.replace(/_[0-9]+$/, '').replace('_', '-');
			};

			this.getForm = function(no_btn){
				if(!_built) self.buildForm(no_btn);
				return _html;
			};

			this.buildForm = function(no_btn){
				_html.append('<input name="utf8" type="hidden" value="âœ“">');
				if(['patch', 'put'].indexOf(method) != -1) _html.append('<input type="hidden" name="_method" value="' + method + '">');
				_html.append('<input type="hidden" name="authenticity_token" value="' + AUTH_TOKEN + '">');
				for(var i=0; i<_fields.length; i++){
					var field = _fields[i];
					if(field.container){
						_html.append($('<div class="input"></div>').append(field.html));
					}else{
						_html.append(field.html);
					}
				}
				if(!no_btn) _html.append('<input type="submit" name="commit" value="Save" class="button btn-small with-top-gap f-right" />');
				_built = true;
				return this;
			};

			var _html = $('<form class="' + self.getClassName() + '" id="' + self.getFormId() + '" action="' + action + '" accept-charset="UTF-8" method="' + (['patch', 'put'].indexOf(method) != -1 ? 'post' : method) + '" data-remote="true" data-callback="' + (callback != undefined ? callback : '') + '"></form>');

			return this;
		},

		Toast: function(message, exposure, undo){
			if(isNaN(exposure)) exposure = 4000;
			if(undo == undefined && typeof exposure == 'function') undo = exposure;
			clearTimeout(this._timer);
			$('.toast').remove();
			var toast = $('<div class="toast"></div>').append(message).hide();
			if(typeof undo == 'function') toast.append($('<a href="javascript:void(0);" class="toast-undo">Undo</a>').click(undo));
			$('body').append(toast);
			toast.fadeIn(400).css('margin-left', -(toast.outerWidth()/2)).click(function(){
				$(this).fadeOut(300, function(){
					$(this).remove();
				});
			});
			this._timer = setTimeout(function(){
				toast.fadeOut(300, function(){
					$(this).remove();
				});
			}, exposure);
		},

		Loader: function(){
			var loaded = 0;

			this.preload = function(images){
				var dfr = $.Deferred();

				if(images.length == 0){
					return dfr.resolve().promise();
				}

				images.each(function(){
					var img = new Image();
					$(img).css('display', 'none');
					document.body.appendChild(img);
					$(img).on('load', function(){
						if(images.length == ++loaded){
							dfr.resolve();
						}
						$(img).remove();
					});
					img.src = $(this).attr('src');
				});
				return dfr.promise();
			}
		},

		Dialog: function(title, body, remove){
			var self = this;
			var _dialog = null;
			var _overlay = null;
			var _closeCallback = null;
			var _beforeCloseCallback = null;

			this.show = function(click_close, width, height){
				self.build().overlay();
				self.removeError();
				var loader = new Bean.Loader();
				var dfr = $.Deferred();

				if(self._dialog.find('img').length > 0){
					loader.preload(self._dialog.find('img')).done(function(){
						if(width !== undefined) self._dialog.width(width);
						if(height !== undefined) self._dialog.height(height);
						self._dialog.fadeIn(300);
						self._overlay.fadeIn(200);
						self._dialog.find('button.close').click(self.hide);
						if(click_close){
							self._overlay.addClass('clickable').click(self.hide);
						}else{
							self._overlay.removeClass('clickable').unbind('click');
						}
						self.center(false, self._dialog.find('img').length > 0);
						dfr.resolve();
					});
					return dfr.promise();
				}else{
					if(width !== undefined) self._dialog.width(width);
					if(height !== undefined) self._dialog.height(height);
					self._dialog.fadeIn(300);
					self._overlay.fadeIn(200);
					self._dialog.find('button.close').click(self.hide);
					if(click_close){
						self._overlay.addClass('clickable').click(self.hide);
					}else{
						self._overlay.removeClass('clickable').unbind('click');
					}
					self.center(false, self._dialog.find('img').length > 0);
					return dfr.resolve().promise();
				}
			};

			this.hide = function(event){
				if(typeof self._beforeCloseCallback == 'function'){
					self._beforeCloseCallback(self);
				}
				if(self._dialog.find('.dialog-error:not(.ignore)').length) return;
				self._dialog.fadeOut(200);
				self._overlay.fadeOut(200);
				if(typeof self._closeCallback == 'function'){
					self._closeCallback(self);
				}
			};

			this.build = function(){
				if($('#dialog').length){
					$('#dialog').remove();
				}

				if(title instanceof jQuery){
					self._dialog = title;
				}else{
					var html = '<div id="dialog" class="dialog">';
					html += '<header class="dialog-header"><h4 class="heading">' + title + '</h4>';
					html += '<button class="close icon-close"></button>';
					html += '</header>';
					html += '<div class="dialog-body">' + (body instanceof $ ? $('<div>').append(body.clone(true)).html() : body) + '</div>';
					html += '</div>';
					$('body').append(html);
					self._dialog = $('#dialog');
				}
				self._dialog.data('dialog', this);
				return this;
			};

			this.center = function(animate, no_scroll){
				if(self._dialog.height() > $(window).height() && !no_scroll){
					var newH = $(window).height();
					if(self._dialog.find('.dialog-header')){
						newH -= self._dialog.find('.dialog-header').outerHeight(true);
					}
					if(self._dialog.find('.dialog-footer')){
						newH -= self._dialog.find('.dialog-footer').outerHeight(true);
					}
					newH -= 100;
					self._dialog.find('.dialog-body').height(newH);
				}

				var windowW = $(window).width();
				var windowH = $(window).height();
				var dialogW = self._dialog.width();
				var dialogH = self._dialog.height();

				var top = (windowH/2)-(dialogH/2);
				var left = (windowW/2)-(dialogW/2);

				if(top < 10) top = 10;

				if(animate){
					self._dialog.animate({ top: top, left: left, marginLeft: 0 }, 300);
				}else{
					self._dialog.css({ top: top, left: left, marginLeft: 0 });
				}
				return this;
			};

			this.resize = function(){
				self._dialog.width(self._dialog.find('.dialog-body').outerWidth());
				self._dialog.height(self._dialog.find('.dialog-body').outerHeight());
			};

			this.overlay = function(){
				if(!$('#overlay').length){
					$('body').append('<div id="overlay"></div>');
				}
				self._overlay = $('#overlay');
				return this;
			};

			this.onBeforeClose = function(callback){
				self._beforeCloseCallback = callback;
				return this;
			};

			this.onClose = function(callback){
				self._closeCallback = callback;
				return this;
			};

			this.setClassName = function(class_name){
				self._dialog.addClass(class_name);
				return this;
			};

			this.addError = function(message){
				self.removeError();
				self._dialog.addClass('dialog-important');
				self._dialog.find('.dialog-body').prepend('<div class="dialog-error with-bottom-gap">' + message + '</div>');
				self._dialog.find('.dialog-body').scrollTop(0);
				self._dialog.find('.dialog-error').hide().slideDown(200);
				return this;
			};

			this.removeError = function(){
				self._dialog.removeClass('dialog-important');
				self._dialog.find('.dialog-error').addClass('ignore').slideUp(200, function(){
					$(this).remove();
				});
				return this;
			};

			this.getDialog = function(){
				return self._dialog;
			};
		},

		Upload: {
			close: function(link){
				$(link).closest('.dz-preview').remove();
			},

			delete: function(link, type, id){
				$(link).closest('form').prepend('<input type="hidden" name="user[' + type + '_attributes][' + id + '][_destroy]" value="1" />');
				$(link).closest('form').prepend('<input type="hidden" name="user[' + type + '_attributes][' + id + '][id]" value="' + id + '" />');
				Bean.Upload.close(link);
			}
		},

		Avatar: {
			show: function(avatar){
				var dialog = new Bean.Dialog($('#' + USER_TYPE + '-dialogs-avatar'));
				dialog.show(false, 'auto').done(function(){
					var $cropper = $('#image-cropper').cropit({
						imageState: {
							src: avatar
						},
						imageBackground: true,
						imageBackgroundBorderWidth: 100,
						onImageLoaded: function(){
							dialog.resize();
							var position = ($("#zoom").data('sliderObject') ? $("#zoom").data('sliderObject').value : $cropper.cropit('zoom')*100);
							$('.slider-container .slider').remove();
							$("#zoom").simpleSlider({ value: position, range: [$cropper.cropit('zoom')*100, 100] }).on('slider:changed', function(event, data){
								$cropper.cropit('zoom', data.value/100);
							});
							$cropper.cropit('zoom', position/100);
						}
					});
				});
				window.event.stopPropagation();
			},

			beforeSave: function(){
				var cropImage = $('#image-cropper').cropit('imageSize');
				var cropWindow = $('#image-cropper').cropit('previewSize');
				var cropPosition = $('#image-cropper .cropit-image-background').position();
				var cropPercentX = Math.abs(cropPosition.left-100)/$('#image-cropper .cropit-image-background').width();
				var cropPercentY = Math.abs(cropPosition.top-100)/$('#image-cropper .cropit-image-background').height();
				var cropPercentW = cropWindow.width/$('#image-cropper .cropit-image-background').width();
				var cropPercentH = cropWindow.height/$('#image-cropper .cropit-image-background').height();
				var positionX = Math.abs(cropPosition.left-100);
				var positionY = Math.abs(cropPosition.top-100);
				var cropX = cropImage.width*cropPercentX;
				var cropY = cropImage.height*cropPercentY;
				var cropW = cropImage.width*cropPercentW;
				var cropH = cropImage.height*cropPercentH;
				$('#user_crop_x').val(cropX);
				$('#user_crop_y').val(cropY);
				$('#user_crop_w').val(cropW);
				$('#user_crop_h').val(cropH);
				return true;
			},

			onUpload: function(file, response){
				var dialog = new Bean.Dialog($('#crews-dialogs-avatar'));
				dialog.build();
				if(response.image){
					dialog.removeError();
					$('#image-cropper').cropit('imageSrc', response.image);
				}else if(response.error){
					dialog.addError(response.error);
				}
			}
		},

		Calendar: {
			range: function(start, end, format, default_text){
				var starting = moment(start, format);
				var ending = moment(end, format);
				if(!$('#start_date').blank() && !$('#end_date').blank()){
					if(starting.format('YYYYM') == ending.format('YYYYM')){
						return starting.format('MMMM Do') + ' - ' + ending.format('Do, YYYY');
					}else if(starting.format('YYYY') == ending.format('YYYY')){
						return starting.format('MMMM Do') + ' - ' + ending.format('MMMM Do, YYYY');
					}else{
						return starting.format('MMMM Do, YYYY') + ' - ' + ending.format('MMMM Do, YYYY');
					}
				}else if($('#start_date').blank() && !$('#end_date').blank()){
					return ending.format('[Ends] MMMM Do, YYYY');
				}else if(!$('#start_date').blank() && $('#end_date').blank()){
					return starting.format('[Starts] MMMM Do, YYYY');
				}
				if(default_text == undefined) default_text == '';
				return default_text;
			},

			setTime: function(){
				var container = $(this).closest('.daterangepicker-time-container');
				var input = container.find('.daterangepicker-time-input');
				var time = $(this).closest('li').data('time');
				$(this).closest('ul').find('li').removeClass('active');
				$(this).closest('li').addClass('active');
				input.val(time).trigger('time:changed');
			},

			parseTime: function(input, context){
				input = $.trim(input);

				input = input.replace(/^0*/, '');
				if(/^[0-9]{4}/.test(input)) input = input.substr(0, 2) + ':' + input.substr(2);
				if(/^[0-9]{3}/.test(input)) input = input.substr(0, 1) + ':' + input.substr(1);

				try
				{
					var d = new Date();
					var time = input.match(/(\d+)(?::(\d\d))?\s*((p|a)?)/i);
					var ampm = (time[3] ? time[3] : 'a').toLowerCase();
					var hours = parseInt(time[1]);
					var minutes = parseInt(time[2]) || 0;
					if(ampm == "p" && hours < 12) hours += 12;
					if(ampm == "a" && hours == 12) hours -= 12;
					if(hours < 24 && minutes <= 60){
						if(typeof context == 'object'){
							d.setFullYear(context.year());
							d.setMonth(context.month());
							d.setDate(context.date());
						}
						d.setHours(hours);
						d.setMinutes(minutes);
						return moment(d);
					}
				}catch(e){
				}
				return false;
			}
		},

		Template: {
			parse: function(template, data){
				var output = template;
				$.each(data, function(key, value){
					output = output.replace('{{' + key + '}}', value);
				});
				return output;
			}
		},

		Color: {
			random: function(){
				var h = Bean.Abstract.rand(0, 360);
				var s = Bean.Abstract.rand(80, 100)/100;
				var l = Bean.Abstract.rand(50, 70)/100;
				return Bean.Color.HSLToRGB(h, s, l);
			},

			HSLToRGB: function(hue, saturation, lightness){
				if(hue == undefined){
					return [0, 0, 0];
				}

				var chroma = (1 - Math.abs((2 * lightness) - 1)) * saturation;
				var huePrime = hue / 60;
				var secondComponent = chroma * (1 - Math.abs((huePrime % 2) - 1));

				huePrime = Math.floor(huePrime);
				var red;
				var green;
				var blue;

				if(huePrime === 0){
					red = chroma;
					green = secondComponent;
					blue = 0;
				}else if(huePrime === 1){
					red = secondComponent;
					green = chroma;
					blue = 0;
				}else if(huePrime === 2){
					red = 0;
					green = chroma;
					blue = secondComponent;
				}else if(huePrime === 3){
					red = 0;
					green = secondComponent;
					blue = chroma;
				}else if(huePrime === 4){
					red = secondComponent;
					green = 0;
					blue = chroma;    
				}else if(huePrime === 5){
					red = chroma;
					green = 0;
					blue = secondComponent;
				}

				var lightnessAdjustment = lightness - (chroma / 2);
				red += lightnessAdjustment;
				green += lightnessAdjustment;
				blue += lightnessAdjustment;

				return Bean.Color.RGBToHEX(Math.round(red * 255), Math.round(green * 255), Math.round(blue * 255));
			},

			componentToHex: function(c){
				var hex = c.toString(16);
				return hex.length == 1 ? "0" + hex : hex;
			},

			RGBToHEX: function(r, g, b){
				return "#" + Bean.Color.componentToHex(r) + Bean.Color.componentToHex(g) + Bean.Color.componentToHex(b);
			}
		},

		Support: {
			hasInputType: function(type){
				var test = document.createElement("input");
				test.setAttribute("type", "color");
				return test.type !== "text";
			},

			hasPlaceholder: function(){
				var test = document.createElement('input');
				return ('placeholder' in test);
			}
		},

		Flash: {
			close: function(btn){
				$(btn).closest('.flash').slideUp(200, function(){
					$(this).remove();
				});
			}
		},

		Abstract: {
			/**
			 * Javascript object with credit card types
			 * 0 - regexp for card number
			 * 1 - regexp for cvn
			 * 2 - check or not credit card number trough Luhn algorithm by
			 */
			creditCardTypes: {
				'SO': [new RegExp('^(6334[5-9]([0-9]{11}|[0-9]{13,14}))|(6767([0-9]{12}|[0-9]{14,15}))$'), new RegExp('^([0-9]{3}|[0-9]{4})?$'), true],
				'SM': [new RegExp('(^(5[0678])[0-9]{11,18}$)|(^(6[^05])[0-9]{11,18}$)|(^(601)[^1][0-9]{9,16}$)|(^(6011)[0-9]{9,11}$)|(^(6011)[0-9]{13,16}$)|(^(65)[0-9]{11,13}$)|(^(65)[0-9]{15,18}$)|(^(49030)[2-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49033)[5-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49110)[1-2]([0-9]{10}$|[0-9]{12,13}$))|(^(49117)[4-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49118)[0-2]([0-9]{10}$|[0-9]{12,13}$))|(^(4936)([0-9]{12}$|[0-9]{14,15}$))'), new RegExp('^([0-9]{3}|[0-9]{4})?$'), true],
				'VI': [new RegExp('^4[0-9]{12}([0-9]{3})?$'), new RegExp('^[0-9]{3}$'), true],
				'MC': [new RegExp('^5[1-5][0-9]{14}$'), new RegExp('^[0-9]{3}$'), true],
				'AE': [new RegExp('^3[47][0-9]{13}$'), new RegExp('^[0-9]{4}$'), true],
				'DI': [new RegExp('^(30[0-5][0-9]{13}|3095[0-9]{12}|35(2[8-9][0-9]{12}|[3-8][0-9]{13})|36[0-9]{12}|3[8-9][0-9]{14}|6011(0[0-9]{11}|[2-4][0-9]{11}|74[0-9]{10}|7[7-9][0-9]{10}|8[6-9][0-9]{10}|9[0-9]{11})|62(2(12[6-9][0-9]{10}|1[3-9][0-9]{11}|[2-8][0-9]{12}|9[0-1][0-9]{11}|92[0-5][0-9]{10})|[4-6][0-9]{13}|8[2-8][0-9]{12})|6(4[4-9][0-9]{13}|5[0-9]{14}))$'), new RegExp('^[0-9]{3}$'), true],
				'JCB': [new RegExp('^(30[0-5][0-9]{13}|3095[0-9]{12}|35(2[8-9][0-9]{12}|[3-8][0-9]{13})|36[0-9]{12}|3[8-9][0-9]{14}|6011(0[0-9]{11}|[2-4][0-9]{11}|74[0-9]{10}|7[7-9][0-9]{10}|8[6-9][0-9]{10}|9[0-9]{11})|62(2(12[6-9][0-9]{10}|1[3-9][0-9]{11}|[2-8][0-9]{12}|9[0-1][0-9]{11}|92[0-5][0-9]{10})|[4-6][0-9]{13}|8[2-8][0-9]{12})|6(4[4-9][0-9]{13}|5[0-9]{14}))$'), new RegExp('^[0-9]{3}$'), true],
				'OT': [new RegExp('^([0-9]+)$'), new RegExp('^([0-9]{3}|[0-9]{4})?$'), false],
				'DN': [new RegExp('^3((0([0-5]\\d*)?)|[689]\\d*)?$'), new RegExp('^[0-9]{3}$'), true],
				'UN': [new RegExp('^6(2\\d*)?$'), new RegExp('^[0-9]{3}$'), true],
				'MI': [new RegExp('^(5(0|[6-9])|63|67(?!59|6770|6774))\\d*$'), new RegExp('^[0-9]{3}$'), true],
				'MD': [new RegExp('^6759(?!24|38|40|6[3-9]|70|76)|676770|676774\\d*$'), new RegExp('^[0-9]{3}$'), true]
			},

			rand: function(min, max){
				return min + Math.random() * (max - min);
			},

			getWidth: function(content){
				var id = 'el-outside-' + Math.round(Bean.Abstract.rand(0, 9999));
				var innerHtml = $('<div />').html($(content).clone());
				innerHtml.find('*').css('position', 'static'); // We have trouble measuring the width of absolutely positioned elements
				$('body').append('<div id="' + id + '" class="outside-window">' + innerHtml.html() + '</div>');
				var width = $('#' + id).outerWidth();
				$('#' + id).remove();
				return width;
			},

			getHeight: function(content){
				var id = 'el-outside-' + Math.round(Bean.Abstract.rand(0, 9999));
				var innerHtml = $('<div />').html($(content).clone());
				innerHtml.find('*').css('position', 'static'); // We have trouble measuring the width of absolutely positioned elements
				$('body').append('<div id="' + id + '" class="outside-window">' + innerHtml.html() + '</div>');
				var height = $('#' + id).outerHeight();
				$('#' + id).remove();
				return height;
			},

			getId: function(){
				var id = parseInt(new Date().getTime()/1000);
				while($('[id*="' + id + '"]').length){
					id += 1;
				}
				return id;
			},

			isMobile: function(){
				var agent = navigator.userAgent || navigator.vendor || window.opera;
				return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(agent) ||
				/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(agent.substr(0, 4));
			},

			isEmpty: function(value){
                return (value === '' || value === undefined || (value == null) || (value.length === 0) || /^\s+$/.test(value));
            },

            /**
             * Check if string is empty no trim
             * @param {string} value
             */
            isEmptyNoTrim: function(value){
                return (value === '' || (value == null) || (value.length === 0));
            },

            /**
             * Checks if {value} is between numbers {from} and {to}
             * @param {string} value
             * @param {string} from
             * @param {string} to
             * @returns {boolean}
             */
            isBetween: function(value, from, to){
                return (Bean.Abstract.isEmpty(from) || value >= Bean.Abstract.parseNumber(from)) && (Bean.Abstract.isEmpty(to) || value <= Bean.Abstract.parseNumber(to));
            },

            /**
             * Parse price string
             * @param {string} value
             */
            parseNumber: function(value){
                if (typeof value !== 'string'){
                    return parseFloat(value);
                }
                var isDot = value.indexOf('.');
                var isComa = value.indexOf(',');
                if (isDot !== -1 && isComa !== -1) {
                    if (isComa > isDot) {
                        value = value.replace('.', '').replace(',', '.');
                    } else {
                        value = value.replace(',', '');
                    }
                } else if (isComa !== -1) {
                    value = value.replace(',', '.');
                }
                return parseFloat(value);
            },

            /**
		     * validate credit card number using mod10
		     * @param s
		     * @return {Boolean}
		     */
		    validateCreditCard: function(s){
		        // remove non-numerics
		        var v = "0123456789",
		            w = "", i, j, k, m, c, a, x;
		        for(i = 0; i < s.length; i++){
		            x = s.charAt(i);
		            if (v.indexOf(x, 0) != -1)
		                w += x;
		        }
		        // validate number
		        j = w.length / 2;
		        k = Math.floor(j);
		        m = Math.ceil(j) - k;
		        c = 0;
		        for(i = 0; i < k; i++){
		            a = w.charAt(i * 2 + m) * 2;
		            c += a > 9 ? Math.floor(a / 10 + a % 10) : a;
		        }
		        for(i = 0; i < k + m; i++){
		            c += w.charAt(i * 2 + 1 - m) * 1;
		        }
		        return (c % 10 === 0);
		    },

            /**
             * Removes HTML tags and space characters, numbers and punctuation.
             * @param value Value being stripped.
             * @return {*}
             */
            stripHtml: function (value){
                return value.replace(/<.[^<>]*?>/g, ' ').replace(/&nbsp;|&#160;/gi, ' ').replace(/[0-9.(),;:!?%#$'"_+=\/-]*/g, '');
            },

			unique: function(array){
				return $.grep(array, function(el, index) {
					return index === $.inArray(el, array);
				});
			}
		}
	};
})(jQuery);